#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ejs-project:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '443');
app.set('port', port);



var options = {
  key: fs.readFileSync(__dirname + '/servername.key'),
  cert: fs.readFileSync(__dirname + '/server.crt'),
  passphrase: 'primitive1A'
};
/**
 * Create HTTP server.
 */
//app.get('*',function(req,res,next){
//  if(req.headers['x-forwarded-proto']!='https') {
//    res.redirect('https://bigaru.com'+req.url);
//  } else {
//    next(); /* Continue to other routes if we're not redirecting */
//  }
//});
//http.createServer((app).all("*", function (request, response) {
//    response.redirect(`https://${request.hostname}${request.url}`);
//})).listen(80);

var server = https.createServer(options, app);


const { Server } = require("socket.io");
const io = new Server(server, {allowEIO3: true});
var dragData = [];
io.on('connection', (socket) => {
    console.log('a user connected');
    let userid = Math.floor(Math.random() * 100000);
    const userData = {
      id: userid,
      x: Math.floor(Math.random() * 640),
      y: Math.floor(Math.random() * 480),
      r: Math.floor(Math.random() * 256),
      g: Math.floor(Math.random() * 256),
      b: Math.floor(Math.random() * 256)
    };
    dragData.push(userData);
    io.to(socket.id).emit("userdata", userData);

    socket.on('disconnect', function() {
        console.log("client disconnected!!")
    });
    socket.on("from_client", function(obj){
        console.log(obj)
    });
    socket.on("drag", (data) => {
      for (let l = 0; l < dragData.length; ++l) {
        if (dragData[l].id == data.id) {
          dragData[l] = data;
          break;
        }
      }
      io.emit("drag", dragData);
    });
});
var send_servertime = function() {
    var now = new Date();
    io.emit("from_server", now.toLocaleString());
    console.log(now.toLocaleString());
    setTimeout(send_servertime, 1000)
};
//send_servertime();

server.listen(port);

/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
//server.on('error', onError);
//server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
